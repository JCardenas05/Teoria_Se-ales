options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: untitled
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '5000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: analog_noise_source_x_0
  id: analog_noise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    seed: '0'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 352.0]
    rotation: 0
    state: true
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 280.0]
    rotation: 0
    state: true
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 288.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    Nsamples: '20'
    Nsymbols: '100'
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.basic_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, p_simbol_0=0.5,\
      \ a0=-1, a1=1, Nsamples=20, Nsymbols=100 ):  # only default arguments here\n\
      \        \"\"\"arguments to this function show up as parameters in GRC\"\"\"\
      \n        gr.sync_block.__init__(\n            self,\n            name='Embedded\
      \ Python Block',   # will show up in GRC\n            in_sig= None, #[np.float32],\n\
      \            out_sig=[np.float32]\n        )\n        \n        self.p_0 = p_simbol_0\
      \ #probabilidad de generaci\xF3n s\xEDmbolo 1\n        self.p_1 = 1-self.p_0\
      \ #probabilidad de generaci\xF3n s\xEDmbolo 2\n        self.a0 = a0\n      \
      \  self.a1 = a1\n\n        self.Nsymbols = Nsymbols\n        self.Nsamples =\
      \ Nsamples\n\n        self.N = Nsymbols * Nsamples \n        \n        \n  \
      \      # if an attribute with the same name as a parameter is found,\n     \
      \   # a callback is registered (properties work, too).\n\n    def work(self,\
      \ input_items, output_items):\n        # Genera una secuencia de s\xEDmbolos\
      \ basados en las probabilidades dadas\n        data = np.random.choice([self.a0,\
      \ self.a1], size=self.Nsymbols, p=[self.p_0, self.p_1])\n        # Repite cada\
      \ s\xEDmbolo seg\xFAn el n\xFAmero de muestras por s\xEDmbolo\n        data\
      \ = np.concatenate([[v]*self.Nsamples for v in data])\n        message = data\
      \  # Almacena la secuencia completa en la variable 'message'\n        \"\"\"\
      example: multiply with constant\"\"\"\n        for i in range(len(message)):\n\
      \        \toutput_items[0][i] =  message[i]\n       \n        return len(output_items[0])\n"
    a0: '-1'
    a1: '1'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    p_simbol_0: '0.5'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('p_simbol_0', '0.5'), ('a0', '-1'),
      ('a1', '1'), ('Nsamples', '20'), ('Nsymbols', '100')], [], [('0', 'float', 1)],
      'Embedded Python Block example - a simple multiply const', ['Nsamples', 'Nsymbols',
      'a0', 'a1'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [232, 176.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from sklearn.neighbors import KernelDensity\nfrom sklearn.model_selection import\
      \ GridSearchCV\nimport scipy.stats\nfrom gnuradio import gr\n\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ example_param=1.0):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Embedded Python Block',   # will show\
      \ up in GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.example_param\
      \ = example_param\n        \n    def kde_function(signal_x,eval_points=None,method=\"\
      Silverman\",res=500):\n    \t\n        if method == 'Silverman':\n         \
      \   n = len(signal_x)\n            sigma = np.std(signal_x)\n            optimal_bandwidth\
      \ = (4 / (3 * n)) ** (1 / 5) * sigma\n            print(f'Method:{method}\\\
      nOptimal bandwidth: {optimal_bandwidth:.2f}')\n\n        elif method == 'Cross\
      \ Validation':\n            # Define los posibles valores para el ancho de banda\n\
      \            bandwidths = np.arange(0.05, 2, 0.05)\n\n            # Crea y configura\
      \ el objeto para la b\xFAsqueda en la cuadr\xEDcula\n            kde = KernelDensity(kernel='gaussian')\n\
      \            grid = GridSearchCV(kde, {'bandwidth': bandwidths})\n         \
      \   grid.fit(signal_x.reshape(-1, 1))\n\n            # Obtiene el mejor estimador\
      \ y su ancho de banda \xF3ptimo\n            kde_optimal = grid.best_estimator_\n\
      \            optimal_bandwidth = kde_optimal.bandwidth\n            print(f'Optimal\
      \ bandwidth: {optimal_bandwidth:.2f}')\n\n        else:\n            print('Error')\n\
      \            return\n            \n        kde = scipy.stats.gaussian_kde(signal_x,\
      \ bw_method=optimal_bandwidth)\n\n        if eval_points is None:\n        \
      \    eval_points = np.linspace(np.min(signal_x), np.max(signal_x),res)\n   \
      \         \n        y_sp = kde.pdf(eval_points)\n            \n        return\
      \ (eval_points, y_sp)\n\n    def work(self, input_items, output_items):\n  \
      \      \"\"\"example: multiply with constant\"\"\"\n        output_items[0][:]\
      \ = input_items[0] * self.example_param\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [('0',
      'float', 1)], [('0', 'float', 1)], 'Embedded Python Block example - a simple
      multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 272.0]
    rotation: 0
    state: true
- name: qtgui_histogram_sink_x_0
  id: qtgui_histogram_sink_x
  parameters:
    accum: 'False'
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    bins: '26'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '2048'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '5'
    xmin: '-5'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 112.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '2'
    size: '2000'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [968, 448.0]
    rotation: 0
    state: true

connections:
- [analog_noise_source_x_0, '0', blocks_add_xx_0, '1']
- [blocks_add_xx_0, '0', blocks_throttle_0, '0']
- [blocks_throttle_0, '0', epy_block_1, '0']
- [blocks_throttle_0, '0', qtgui_histogram_sink_x_0, '0']
- [blocks_throttle_0, '0', qtgui_time_sink_x_0, '0']
- [epy_block_0, '0', blocks_add_xx_0, '0']
- [epy_block_1, '0', qtgui_time_sink_x_0, '1']

metadata:
  file_format: 1
